CCS PCM C Compiler, Version 5.101, 43599               26-Nov-22 04:01

               Filename:   E:\HCMUTE\0 - VXL\0 - TEACHING\1-ON-TAP-VDK-HK1-22-23\day2\dethihk22021-2022.lst

               ROM used:   904 words (11%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           21 (6%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   30B
0003:  NOP
.................... #include <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA CC,26
0005:  DATA B3,1A
0006:  DATA BA,12
0007:  DATA 30,19
0008:  DATA 75,00
*
011C:  MOVLW  8E
011D:  MOVWF  77
011E:  MOVF   22,W
011F:  MOVWF  78
0120:  MOVF   21,W
0121:  MOVWF  79
0122:  CLRF   7A
0123:  MOVF   78,F
0124:  BTFSS  03.2
0125:  GOTO   130
0126:  MOVF   79,W
0127:  MOVWF  78
0128:  CLRF   79
0129:  MOVLW  08
012A:  SUBWF  77,F
012B:  MOVF   78,F
012C:  BTFSS  03.2
012D:  GOTO   130
012E:  CLRF   77
012F:  GOTO   138
0130:  BCF    03.0
0131:  BTFSC  78.7
0132:  GOTO   137
0133:  RLF    79,F
0134:  RLF    78,F
0135:  DECF   77,F
0136:  GOTO   130
0137:  BCF    78.7
0138:  BCF    0A.3
0139:  BCF    0A.4
013A:  GOTO   352 (RETURN)
013B:  MOVF   21,W
013C:  BTFSC  03.2
013D:  GOTO   200
013E:  MOVWF  2D
013F:  MOVF   25,W
0140:  BTFSC  03.2
0141:  GOTO   200
0142:  SUBWF  2D,F
0143:  BTFSS  03.0
0144:  GOTO   14A
0145:  MOVLW  7F
0146:  ADDWF  2D,F
0147:  BTFSC  03.0
0148:  GOTO   200
0149:  GOTO   150
014A:  MOVLW  81
014B:  SUBWF  2D,F
014C:  BTFSS  03.0
014D:  GOTO   200
014E:  BTFSC  03.2
014F:  GOTO   200
0150:  MOVF   2D,W
0151:  MOVWF  77
0152:  CLRF   78
0153:  CLRF   79
0154:  CLRF   7A
0155:  CLRF   2C
0156:  MOVF   22,W
0157:  MOVWF  2B
0158:  BSF    2B.7
0159:  MOVF   23,W
015A:  MOVWF  2A
015B:  MOVF   24,W
015C:  MOVWF  29
015D:  MOVLW  19
015E:  MOVWF  2D
015F:  MOVF   28,W
0160:  SUBWF  29,F
0161:  BTFSC  03.0
0162:  GOTO   173
0163:  MOVLW  01
0164:  SUBWF  2A,F
0165:  BTFSC  03.0
0166:  GOTO   173
0167:  SUBWF  2B,F
0168:  BTFSC  03.0
0169:  GOTO   173
016A:  SUBWF  2C,F
016B:  BTFSC  03.0
016C:  GOTO   173
016D:  INCF   2C,F
016E:  INCF   2B,F
016F:  INCF   2A,F
0170:  MOVF   28,W
0171:  ADDWF  29,F
0172:  GOTO   1A5
0173:  MOVF   27,W
0174:  SUBWF  2A,F
0175:  BTFSC  03.0
0176:  GOTO   18E
0177:  MOVLW  01
0178:  SUBWF  2B,F
0179:  BTFSC  03.0
017A:  GOTO   18E
017B:  SUBWF  2C,F
017C:  BTFSC  03.0
017D:  GOTO   18E
017E:  INCF   2C,F
017F:  INCF   2B,F
0180:  MOVF   27,W
0181:  ADDWF  2A,F
0182:  MOVF   28,W
0183:  ADDWF  29,F
0184:  BTFSS  03.0
0185:  GOTO   1A5
0186:  INCF   2A,F
0187:  BTFSS  03.2
0188:  GOTO   1A5
0189:  INCF   2B,F
018A:  BTFSS  03.2
018B:  GOTO   1A5
018C:  INCF   2C,F
018D:  GOTO   1A5
018E:  MOVF   26,W
018F:  IORLW  80
0190:  SUBWF  2B,F
0191:  BTFSC  03.0
0192:  GOTO   1A4
0193:  MOVLW  01
0194:  SUBWF  2C,F
0195:  BTFSC  03.0
0196:  GOTO   1A4
0197:  INCF   2C,F
0198:  MOVF   26,W
0199:  IORLW  80
019A:  ADDWF  2B,F
019B:  MOVF   27,W
019C:  ADDWF  2A,F
019D:  BTFSS  03.0
019E:  GOTO   182
019F:  INCF   2B,F
01A0:  BTFSS  03.2
01A1:  GOTO   182
01A2:  INCF   2C,F
01A3:  GOTO   182
01A4:  BSF    7A.0
01A5:  DECFSZ 2D,F
01A6:  GOTO   1A8
01A7:  GOTO   1B3
01A8:  BCF    03.0
01A9:  RLF    29,F
01AA:  RLF    2A,F
01AB:  RLF    2B,F
01AC:  RLF    2C,F
01AD:  BCF    03.0
01AE:  RLF    7A,F
01AF:  RLF    79,F
01B0:  RLF    78,F
01B1:  RLF    2E,F
01B2:  GOTO   15F
01B3:  BTFSS  2E.0
01B4:  GOTO   1BB
01B5:  BCF    03.0
01B6:  RRF    78,F
01B7:  RRF    79,F
01B8:  RRF    7A,F
01B9:  RRF    2E,F
01BA:  GOTO   1BE
01BB:  DECF   77,F
01BC:  BTFSC  03.2
01BD:  GOTO   200
01BE:  BTFSC  2E.7
01BF:  GOTO   1E7
01C0:  BCF    03.0
01C1:  RLF    29,F
01C2:  RLF    2A,F
01C3:  RLF    2B,F
01C4:  RLF    2C,F
01C5:  MOVF   28,W
01C6:  SUBWF  29,F
01C7:  BTFSC  03.0
01C8:  GOTO   1D3
01C9:  MOVLW  01
01CA:  SUBWF  2A,F
01CB:  BTFSC  03.0
01CC:  GOTO   1D3
01CD:  SUBWF  2B,F
01CE:  BTFSC  03.0
01CF:  GOTO   1D3
01D0:  SUBWF  2C,F
01D1:  BTFSS  03.0
01D2:  GOTO   1F6
01D3:  MOVF   27,W
01D4:  SUBWF  2A,F
01D5:  BTFSC  03.0
01D6:  GOTO   1DE
01D7:  MOVLW  01
01D8:  SUBWF  2B,F
01D9:  BTFSC  03.0
01DA:  GOTO   1DE
01DB:  SUBWF  2C,F
01DC:  BTFSS  03.0
01DD:  GOTO   1F6
01DE:  MOVF   26,W
01DF:  IORLW  80
01E0:  SUBWF  2B,F
01E1:  BTFSC  03.0
01E2:  GOTO   1E7
01E3:  MOVLW  01
01E4:  SUBWF  2C,F
01E5:  BTFSS  03.0
01E6:  GOTO   1F6
01E7:  INCF   7A,F
01E8:  BTFSS  03.2
01E9:  GOTO   1F6
01EA:  INCF   79,F
01EB:  BTFSS  03.2
01EC:  GOTO   1F6
01ED:  INCF   78,F
01EE:  BTFSS  03.2
01EF:  GOTO   1F6
01F0:  INCF   77,F
01F1:  BTFSC  03.2
01F2:  GOTO   200
01F3:  RRF    78,F
01F4:  RRF    79,F
01F5:  RRF    7A,F
01F6:  MOVF   22,W
01F7:  MOVWF  2D
01F8:  MOVF   26,W
01F9:  XORWF  2D,F
01FA:  BTFSS  2D.7
01FB:  GOTO   1FE
01FC:  BSF    78.7
01FD:  GOTO   204
01FE:  BCF    78.7
01FF:  GOTO   204
0200:  CLRF   77
0201:  CLRF   78
0202:  CLRF   79
0203:  CLRF   7A
0204:  BCF    0A.3
0205:  BCF    0A.4
0206:  GOTO   362 (RETURN)
0207:  MOVLW  8E
0208:  MOVWF  77
0209:  MOVF   21,W
020A:  SUBWF  77,F
020B:  MOVF   22,W
020C:  MOVWF  79
020D:  MOVF   23,W
020E:  MOVWF  78
020F:  BSF    79.7
0210:  MOVF   77,F
0211:  BTFSC  03.2
0212:  GOTO   21E
0213:  BCF    03.0
0214:  MOVF   79,F
0215:  BTFSS  03.2
0216:  GOTO   21A
0217:  MOVF   78,F
0218:  BTFSC  03.2
0219:  GOTO   21E
021A:  RRF    79,F
021B:  RRF    78,F
021C:  DECFSZ 77,F
021D:  GOTO   213
021E:  BTFSS  22.7
021F:  GOTO   225
0220:  COMF   78,F
0221:  COMF   79,F
0222:  INCF   78,F
0223:  BTFSC  03.2
0224:  INCF   79,F
0225:  BCF    0A.3
0226:  BCF    0A.4
0227:  GOTO   36B (RETURN)
*
0266:  MOVF   0B,W
0267:  MOVWF  22
0268:  BCF    0B.7
0269:  BSF    03.5
026A:  BSF    03.6
026B:  BSF    0C.7
026C:  BSF    0C.0
026D:  NOP
026E:  NOP
026F:  BCF    03.5
0270:  BCF    03.6
0271:  BTFSC  22.7
0272:  BSF    0B.7
0273:  BTFSC  03.0
0274:  GOTO   29D
0275:  BSF    03.6
0276:  MOVF   0C,W
0277:  ANDLW  7F
0278:  BCF    03.6
0279:  MOVWF  22
027A:  BSF    03.6
027B:  MOVF   0D,W
027C:  BCF    03.6
027D:  MOVWF  23
027E:  BSF    03.6
027F:  MOVF   0F,W
0280:  BCF    03.6
0281:  MOVWF  24
0282:  MOVF   22,W
0283:  MOVWF  25
0284:  CALL   23A
0285:  MOVF   23,W
0286:  BSF    03.6
0287:  MOVWF  0D
0288:  BCF    03.6
0289:  MOVF   24,W
028A:  BSF    03.6
028B:  MOVWF  0F
028C:  BCF    03.6
028D:  MOVF   0B,W
028E:  MOVWF  25
028F:  BCF    0B.7
0290:  BSF    03.5
0291:  BSF    03.6
0292:  BSF    0C.7
0293:  BSF    0C.0
0294:  NOP
0295:  NOP
0296:  BCF    03.5
0297:  BCF    03.6
0298:  BTFSC  25.7
0299:  BSF    0B.7
029A:  DECFSZ 21,F
029B:  GOTO   29D
029C:  GOTO   2BC
029D:  BSF    03.6
029E:  RLF    0C,W
029F:  RLF    0E,W
02A0:  ANDLW  7F
02A1:  BCF    03.6
02A2:  MOVWF  22
02A3:  BSF    03.6
02A4:  MOVF   0D,W
02A5:  BCF    03.6
02A6:  MOVWF  23
02A7:  BSF    03.6
02A8:  MOVF   0F,W
02A9:  BCF    03.6
02AA:  MOVWF  24
02AB:  MOVF   22,W
02AC:  MOVWF  25
02AD:  CALL   23A
02AE:  MOVF   23,W
02AF:  BSF    03.6
02B0:  MOVWF  0D
02B1:  BCF    03.6
02B2:  MOVF   24,W
02B3:  BSF    03.6
02B4:  MOVWF  0F
02B5:  INCF   0D,F
02B6:  BTFSC  03.2
02B7:  INCF   0F,F
02B8:  BCF    03.0
02B9:  BCF    03.6
02BA:  DECFSZ 21,F
02BB:  GOTO   266
02BC:  BCF    0A.3
02BD:  BCF    0A.4
02BE:  GOTO   37B (RETURN)
02BF:  MOVF   24,W
02C0:  CLRF   78
02C1:  SUBWF  23,W
02C2:  BTFSC  03.0
02C3:  GOTO   2C7
02C4:  MOVF   23,W
02C5:  MOVWF  77
02C6:  GOTO   2D3
02C7:  CLRF   77
02C8:  MOVLW  08
02C9:  MOVWF  25
02CA:  RLF    23,F
02CB:  RLF    77,F
02CC:  MOVF   24,W
02CD:  SUBWF  77,W
02CE:  BTFSC  03.0
02CF:  MOVWF  77
02D0:  RLF    78,F
02D1:  DECFSZ 25,F
02D2:  GOTO   2CA
02D3:  RETURN
02D4:  MOVF   78,W
02D5:  MOVF   21,W
02D6:  MOVWF  23
02D7:  MOVLW  64
02D8:  MOVWF  24
02D9:  CALL   2BF
02DA:  MOVF   77,W
02DB:  MOVWF  21
02DC:  MOVF   78,W
02DD:  MOVLW  30
02DE:  BTFSS  03.2
02DF:  GOTO   2E7
02E0:  BTFSS  22.1
02E1:  GOTO   2EE
02E2:  BTFSC  22.3
02E3:  GOTO   2EE
02E4:  BTFSC  22.4
02E5:  MOVLW  20
02E6:  GOTO   2EA
02E7:  BCF    22.3
02E8:  BCF    22.4
02E9:  BSF    22.0
02EA:  ADDWF  78,F
02EB:  MOVF   78,W
02EC:  MOVWF  25
02ED:  CALL   23A
02EE:  MOVF   21,W
02EF:  MOVWF  23
02F0:  MOVLW  0A
02F1:  MOVWF  24
02F2:  CALL   2BF
02F3:  MOVF   77,W
02F4:  MOVWF  21
02F5:  MOVF   78,W
02F6:  MOVLW  30
02F7:  BTFSS  03.2
02F8:  GOTO   2FF
02F9:  BTFSC  22.3
02FA:  GOTO   303
02FB:  BTFSS  22.0
02FC:  GOTO   303
02FD:  BTFSC  22.4
02FE:  MOVLW  20
02FF:  ADDWF  78,F
0300:  MOVF   78,W
0301:  MOVWF  25
0302:  CALL   23A
0303:  MOVLW  30
0304:  ADDWF  21,F
0305:  MOVF   21,W
0306:  MOVWF  25
0307:  CALL   23A
0308:  BCF    0A.3
0309:  BCF    0A.4
030A:  GOTO   380 (RETURN)
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... #fuses  intrc_io
.................... #use delay(clock=8Mhz)
*
0009:  MOVLW  26
000A:  MOVWF  04
000B:  BCF    03.7
000C:  MOVF   00,W
000D:  BTFSC  03.2
000E:  GOTO   01C
000F:  MOVLW  02
0010:  MOVWF  78
0011:  CLRF   77
0012:  DECFSZ 77,F
0013:  GOTO   012
0014:  DECFSZ 78,F
0015:  GOTO   011
0016:  MOVLW  97
0017:  MOVWF  77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 00,F
001B:  GOTO   00F
001C:  RETURN
.................... 
.................... 
.................... #define LCD_ENABLE_PIN  PIN_D0                                    ////
.................... #define LCD_RS_PIN      PIN_D1                                    ////
.................... #define LCD_RW_PIN      PIN_D2                                    ////
.................... #define LCD_DATA4       PIN_D4                                    ////
.................... #define LCD_DATA5       PIN_D5                                    ////
.................... #define LCD_DATA6       PIN_D6                                    ////
.................... #define LCD_DATA7       PIN_D7  
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0082:  BSF    08.4
....................    output_float(LCD_DATA5);
0083:  BSF    08.5
....................    output_float(LCD_DATA6);
0084:  BSF    08.6
....................    output_float(LCD_DATA7);
0085:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0086:  BCF    03.5
0087:  BSF    08.2
0088:  BSF    03.5
0089:  BCF    08.2
....................    delay_cycles(1);
008A:  NOP
....................    lcd_output_enable(1);
008B:  BCF    03.5
008C:  BSF    08.0
008D:  BSF    03.5
008E:  BCF    08.0
....................    delay_cycles(1);
008F:  NOP
....................    high = lcd_read_nibble();
0090:  BCF    03.5
0091:  CALL   049
0092:  MOVF   78,W
0093:  MOVWF  2D
....................       
....................    lcd_output_enable(0);
0094:  BCF    08.0
0095:  BSF    03.5
0096:  BCF    08.0
....................    delay_cycles(1);
0097:  NOP
....................    lcd_output_enable(1);
0098:  BCF    03.5
0099:  BSF    08.0
009A:  BSF    03.5
009B:  BCF    08.0
....................    delay_us(1);
009C:  GOTO   09D
....................    low = lcd_read_nibble();
009D:  BCF    03.5
009E:  CALL   049
009F:  MOVF   78,W
00A0:  MOVWF  2C
....................       
....................    lcd_output_enable(0);
00A1:  BCF    08.0
00A2:  BSF    03.5
00A3:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00A4:  BCF    08.4
....................    output_drive(LCD_DATA5);
00A5:  BCF    08.5
....................    output_drive(LCD_DATA6);
00A6:  BCF    08.6
....................    output_drive(LCD_DATA7);
00A7:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00A8:  BCF    03.5
00A9:  SWAPF  2D,W
00AA:  MOVWF  77
00AB:  MOVLW  F0
00AC:  ANDWF  77,F
00AD:  MOVF   77,W
00AE:  IORWF  2C,W
00AF:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0049:  CLRF   2E
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
004A:  BSF    03.5
004B:  BSF    08.4
004C:  MOVLW  00
004D:  BCF    03.5
004E:  BTFSC  08.4
004F:  MOVLW  01
0050:  IORWF  2E,F
....................    n |= input(LCD_DATA5) << 1;
0051:  BSF    03.5
0052:  BSF    08.5
0053:  MOVLW  00
0054:  BCF    03.5
0055:  BTFSC  08.5
0056:  MOVLW  01
0057:  MOVWF  77
0058:  BCF    03.0
0059:  RLF    77,F
005A:  MOVF   77,W
005B:  IORWF  2E,F
....................    n |= input(LCD_DATA6) << 2;
005C:  BSF    03.5
005D:  BSF    08.6
005E:  MOVLW  00
005F:  BCF    03.5
0060:  BTFSC  08.6
0061:  MOVLW  01
0062:  MOVWF  77
0063:  RLF    77,F
0064:  RLF    77,F
0065:  MOVLW  FC
0066:  ANDWF  77,F
0067:  MOVF   77,W
0068:  IORWF  2E,F
....................    n |= input(LCD_DATA7) << 3;
0069:  BSF    03.5
006A:  BSF    08.7
006B:  MOVLW  00
006C:  BCF    03.5
006D:  BTFSC  08.7
006E:  MOVLW  01
006F:  MOVWF  77
0070:  RLF    77,F
0071:  RLF    77,F
0072:  RLF    77,F
0073:  MOVLW  F8
0074:  ANDWF  77,F
0075:  MOVF   77,W
0076:  IORWF  2E,F
....................    
....................    return(n);
0077:  MOVF   2E,W
0078:  MOVWF  78
....................   #else
0079:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
001D:  BTFSC  2D.0
001E:  GOTO   021
001F:  BCF    08.4
0020:  GOTO   022
0021:  BSF    08.4
0022:  BSF    03.5
0023:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
0024:  BCF    03.5
0025:  BTFSC  2D.1
0026:  GOTO   029
0027:  BCF    08.5
0028:  GOTO   02A
0029:  BSF    08.5
002A:  BSF    03.5
002B:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
002C:  BCF    03.5
002D:  BTFSC  2D.2
002E:  GOTO   031
002F:  BCF    08.6
0030:  GOTO   032
0031:  BSF    08.6
0032:  BSF    03.5
0033:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
0034:  BCF    03.5
0035:  BTFSC  2D.3
0036:  GOTO   039
0037:  BCF    08.7
0038:  GOTO   03A
0039:  BSF    08.7
003A:  BSF    03.5
003B:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
003C:  NOP
....................    lcd_output_enable(1);
003D:  BCF    03.5
003E:  BSF    08.0
003F:  BSF    03.5
0040:  BCF    08.0
....................    delay_us(2);
0041:  GOTO   042
0042:  GOTO   043
....................    lcd_output_enable(0);
0043:  BCF    03.5
0044:  BCF    08.0
0045:  BSF    03.5
0046:  BCF    08.0
0047:  BCF    03.5
0048:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
007A:  BSF    03.5
007B:  BCF    08.0
....................    lcd_rs_tris();
007C:  BCF    08.1
....................    lcd_rw_tris();
007D:  BCF    08.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
007E:  BCF    03.5
007F:  BCF    08.1
0080:  BSF    03.5
0081:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00B0:  MOVF   78,W
00B1:  MOVWF  2C
00B2:  BTFSS  2C.7
00B3:  GOTO   0B6
00B4:  BSF    03.5
00B5:  GOTO   082
....................    lcd_output_rs(address);
00B6:  MOVF   2A,F
00B7:  BTFSS  03.2
00B8:  GOTO   0BB
00B9:  BCF    08.1
00BA:  GOTO   0BC
00BB:  BSF    08.1
00BC:  BSF    03.5
00BD:  BCF    08.1
....................    delay_cycles(1);
00BE:  NOP
....................    lcd_output_rw(0);
00BF:  BCF    03.5
00C0:  BCF    08.2
00C1:  BSF    03.5
00C2:  BCF    08.2
....................    delay_cycles(1);
00C3:  NOP
....................    lcd_output_enable(0);
00C4:  BCF    03.5
00C5:  BCF    08.0
00C6:  BSF    03.5
00C7:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
00C8:  BCF    03.5
00C9:  SWAPF  2B,W
00CA:  MOVWF  2C
00CB:  MOVLW  0F
00CC:  ANDWF  2C,F
00CD:  MOVF   2C,W
00CE:  MOVWF  2D
00CF:  CALL   01D
....................    lcd_send_nibble(n & 0xf);
00D0:  MOVF   2B,W
00D1:  ANDLW  0F
00D2:  MOVWF  2C
00D3:  MOVWF  2D
00D4:  CALL   01D
00D5:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00D6:  MOVLW  28
00D7:  MOVWF  22
00D8:  MOVLW  0C
00D9:  MOVWF  23
00DA:  MOVLW  01
00DB:  MOVWF  24
00DC:  MOVLW  06
00DD:  MOVWF  25
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00DE:  BCF    08.0
00DF:  BSF    03.5
00E0:  BCF    08.0
....................    lcd_output_rs(0);
00E1:  BCF    03.5
00E2:  BCF    08.1
00E3:  BSF    03.5
00E4:  BCF    08.1
....................    lcd_output_rw(0);
00E5:  BCF    03.5
00E6:  BCF    08.2
00E7:  BSF    03.5
00E8:  BCF    08.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00E9:  BCF    08.4
....................    output_drive(LCD_DATA5);
00EA:  BCF    08.5
....................    output_drive(LCD_DATA6);
00EB:  BCF    08.6
....................    output_drive(LCD_DATA7);
00EC:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
00ED:  BCF    08.0
....................    lcd_rs_tris();
00EE:  BCF    08.1
....................    lcd_rw_tris();
00EF:  BCF    08.2
....................  #endif
....................     
....................    delay_ms(15);
00F0:  MOVLW  0F
00F1:  BCF    03.5
00F2:  MOVWF  26
00F3:  CALL   009
....................    for(i=1;i<=3;++i)
00F4:  MOVLW  01
00F5:  MOVWF  21
00F6:  MOVF   21,W
00F7:  SUBLW  03
00F8:  BTFSS  03.0
00F9:  GOTO   102
....................    {
....................        lcd_send_nibble(3);
00FA:  MOVLW  03
00FB:  MOVWF  2D
00FC:  CALL   01D
....................        delay_ms(5);
00FD:  MOVLW  05
00FE:  MOVWF  26
00FF:  CALL   009
0100:  INCF   21,F
0101:  GOTO   0F6
....................    }
....................    
....................    lcd_send_nibble(2);
0102:  MOVLW  02
0103:  MOVWF  2D
0104:  CALL   01D
....................    delay_ms(5);
0105:  MOVLW  05
0106:  MOVWF  26
0107:  CALL   009
....................    for(i=0;i<=3;++i)
0108:  CLRF   21
0109:  MOVF   21,W
010A:  SUBLW  03
010B:  BTFSS  03.0
010C:  GOTO   119
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
010D:  MOVLW  22
010E:  ADDWF  21,W
010F:  MOVWF  04
0110:  BCF    03.7
0111:  MOVF   00,W
0112:  MOVWF  26
0113:  CLRF   2A
0114:  MOVF   26,W
0115:  MOVWF  2B
0116:  CALL   07A
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0117:  INCF   21,F
0118:  GOTO   109
0119:  BCF    0A.3
011A:  BCF    0A.4
011B:  GOTO   32E (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0228:  DECFSZ 27,W
0229:  GOTO   22B
022A:  GOTO   22E
....................       address=LCD_LINE_TWO;
022B:  MOVLW  40
022C:  MOVWF  28
022D:  GOTO   22F
....................    else
....................       address=0;
022E:  CLRF   28
....................      
....................    address+=x-1;
022F:  MOVLW  01
0230:  SUBWF  26,W
0231:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address);
0232:  MOVF   28,W
0233:  IORLW  80
0234:  MOVWF  29
0235:  CLRF   2A
0236:  MOVF   29,W
0237:  MOVWF  2B
0238:  CALL   07A
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0239:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
023A:  MOVF   25,W
023B:  XORLW  07
023C:  BTFSC  03.2
023D:  GOTO   248
023E:  XORLW  0B
023F:  BTFSC  03.2
0240:  GOTO   24D
0241:  XORLW  06
0242:  BTFSC  03.2
0243:  GOTO   255
0244:  XORLW  02
0245:  BTFSC  03.2
0246:  GOTO   25B
0247:  GOTO   260
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0248:  MOVLW  01
0249:  MOVWF  26
024A:  MOVWF  27
024B:  CALL   228
024C:  GOTO   265
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
024D:  CLRF   2A
024E:  MOVLW  01
024F:  MOVWF  2B
0250:  CALL   07A
....................                      delay_ms(2);
0251:  MOVLW  02
0252:  MOVWF  26
0253:  CALL   009
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0254:  GOTO   265
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0255:  MOVLW  01
0256:  MOVWF  26
0257:  MOVLW  02
0258:  MOVWF  27
0259:  CALL   228
025A:  GOTO   265
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
025B:  CLRF   2A
025C:  MOVLW  10
025D:  MOVWF  2B
025E:  CALL   07A
025F:  GOTO   265
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0260:  MOVLW  01
0261:  MOVWF  2A
0262:  MOVF   25,W
0263:  MOVWF  2B
0264:  CALL   07A
....................      #endif
....................    }
0265:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int8 nd;
.................... 
.................... 
.................... void main()
*
030B:  MOVF   03,W
030C:  ANDLW  1F
030D:  MOVWF  03
030E:  MOVLW  71
030F:  BSF    03.5
0310:  MOVWF  0F
0311:  CLRF   10
0312:  MOVF   0F,W
0313:  BSF    03.6
0314:  MOVF   09,W
0315:  ANDLW  C0
0316:  MOVWF  09
0317:  BCF    03.6
0318:  BCF    1F.4
0319:  BCF    1F.5
031A:  MOVLW  00
031B:  BSF    03.6
031C:  MOVWF  08
031D:  BCF    03.5
031E:  CLRF   07
031F:  CLRF   08
0320:  CLRF   09
0321:  BCF    03.7
.................... {
....................    set_Tris_e(0xff);set_Tris_d(0);set_Tris_a(0xff);
0322:  BSF    03.5
0323:  BCF    03.6
0324:  BSF    09.0
0325:  BSF    09.1
0326:  BSF    09.2
0327:  BSF    09.3
0328:  MOVLW  00
0329:  MOVWF  08
032A:  MOVLW  FF
032B:  MOVWF  05
....................    
....................    lcd_init();
032C:  BCF    03.5
032D:  GOTO   0D6
....................    setup_Adc(adc_clock_internal);
032E:  BSF    1F.6
032F:  BSF    1F.7
0330:  BSF    03.5
0331:  BSF    1F.7
0332:  BCF    03.5
0333:  BSF    1F.0
....................    setup_adc_ports(SAN5|VREF_VREF);
0334:  BSF    03.5
0335:  BSF    03.6
0336:  MOVF   09,W
0337:  ANDLW  C0
0338:  MOVWF  09
0339:  BCF    03.6
033A:  BSF    1F.4
033B:  BSF    1F.5
033C:  MOVLW  20
033D:  BSF    03.6
033E:  MOVWF  08
....................    set_Adc_channel(5);
033F:  MOVLW  14
0340:  MOVWF  78
0341:  BCF    03.5
0342:  BCF    03.6
0343:  MOVF   1F,W
0344:  ANDLW  C3
0345:  IORWF  78,W
0346:  MOVWF  1F
....................    
....................    while(true)
....................    {
....................    
....................       nd=read_Adc();
0347:  BSF    1F.1
0348:  BTFSC  1F.1
0349:  GOTO   348
034A:  BSF    03.5
034B:  MOVF   1E,W
034C:  BCF    03.5
034D:  MOVWF  20
....................       nd=nd/3.1;
034E:  CLRF   22
034F:  MOVF   20,W
0350:  MOVWF  21
0351:  GOTO   11C
0352:  MOVF   7A,W
0353:  MOVWF  24
0354:  MOVF   79,W
0355:  MOVWF  23
0356:  MOVF   78,W
0357:  MOVWF  22
0358:  MOVF   77,W
0359:  MOVWF  21
035A:  MOVLW  66
035B:  MOVWF  28
035C:  MOVWF  27
035D:  MOVLW  46
035E:  MOVWF  26
035F:  MOVLW  80
0360:  MOVWF  25
0361:  GOTO   13B
0362:  MOVF   7A,W
0363:  MOVWF  24
0364:  MOVF   79,W
0365:  MOVWF  23
0366:  MOVF   78,W
0367:  MOVWF  22
0368:  MOVF   77,W
0369:  MOVWF  21
036A:  GOTO   207
036B:  MOVF   78,W
036C:  MOVWF  20
....................       lcd_gotoxy(1,1);
036D:  MOVLW  01
036E:  MOVWF  26
036F:  MOVWF  27
0370:  CALL   228
....................       printf(lcd_putc,"LM35:%02u",nd);
0371:  MOVLW  04
0372:  BSF    03.6
0373:  MOVWF  0D
0374:  MOVLW  00
0375:  MOVWF  0F
0376:  BCF    03.0
0377:  MOVLW  05
0378:  BCF    03.6
0379:  MOVWF  21
037A:  GOTO   266
037B:  MOVF   20,W
037C:  MOVWF  21
037D:  MOVLW  01
037E:  MOVWF  22
037F:  GOTO   2D4
....................       lcd_putc(223); //lcd_putc(0xdf); 
0380:  MOVLW  DF
0381:  MOVWF  25
0382:  CALL   23A
....................       lcd_putc('C'); 
0383:  MOVLW  43
0384:  MOVWF  25
0385:  CALL   23A
0386:  GOTO   347
....................    }
.................... }
0387:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
