CCS PCM C Compiler, Version 5.101, 43599               29-May-22 08:54

               Filename:   E:\HCMUTE\0 - VXL\0 - TEACHING\Off-HK2-21-22\Day2\adc_qn.lst

               ROM used:   1083 words (13%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           26 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   31E
0003:  NOP
.................... #include <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  DATA D1,2A
0005:  DATA 41,10
0006:  DATA 4E,24
0007:  DATA C9,22
0008:  DATA 54,10
0009:  DATA B2,25
000A:  DATA 00,00
000B:  DATA D1,2A
000C:  DATA 41,10
000D:  DATA 4E,24
000E:  DATA C9,22
000F:  DATA 54,10
0010:  DATA CB,18
0011:  DATA 00,01
0012:  DATA D1,2A
0013:  DATA 41,10
0014:  DATA 4E,24
0015:  DATA C9,22
0016:  DATA 54,10
0017:  DATA 4B,19
0018:  DATA 00,01
0019:  DATA 20,10
001A:  DATA 20,10
001B:  DATA 20,10
001C:  DATA 20,10
001D:  DATA 20,10
001E:  DATA 20,10
001F:  DATA 20,10
0020:  DATA 20,00
0021:  DATA 43,00
0022:  DATA 43,00
*
013A:  MOVLW  8E
013B:  MOVWF  77
013C:  MOVF   28,W
013D:  MOVWF  78
013E:  MOVF   27,W
013F:  MOVWF  79
0140:  CLRF   7A
0141:  MOVF   78,F
0142:  BTFSS  03.2
0143:  GOTO   14E
0144:  MOVF   79,W
0145:  MOVWF  78
0146:  CLRF   79
0147:  MOVLW  08
0148:  SUBWF  77,F
0149:  MOVF   78,F
014A:  BTFSS  03.2
014B:  GOTO   14E
014C:  CLRF   77
014D:  GOTO   156
014E:  BCF    03.0
014F:  BTFSC  78.7
0150:  GOTO   155
0151:  RLF    79,F
0152:  RLF    78,F
0153:  DECF   77,F
0154:  GOTO   14E
0155:  BCF    78.7
0156:  RETURN
0157:  MOVF   27,W
0158:  BTFSC  03.2
0159:  GOTO   21C
015A:  MOVWF  33
015B:  MOVF   2B,W
015C:  BTFSC  03.2
015D:  GOTO   21C
015E:  SUBWF  33,F
015F:  BTFSS  03.0
0160:  GOTO   166
0161:  MOVLW  7F
0162:  ADDWF  33,F
0163:  BTFSC  03.0
0164:  GOTO   21C
0165:  GOTO   16C
0166:  MOVLW  81
0167:  SUBWF  33,F
0168:  BTFSS  03.0
0169:  GOTO   21C
016A:  BTFSC  03.2
016B:  GOTO   21C
016C:  MOVF   33,W
016D:  MOVWF  77
016E:  CLRF   78
016F:  CLRF   79
0170:  CLRF   7A
0171:  CLRF   32
0172:  MOVF   28,W
0173:  MOVWF  31
0174:  BSF    31.7
0175:  MOVF   29,W
0176:  MOVWF  30
0177:  MOVF   2A,W
0178:  MOVWF  2F
0179:  MOVLW  19
017A:  MOVWF  33
017B:  MOVF   2E,W
017C:  SUBWF  2F,F
017D:  BTFSC  03.0
017E:  GOTO   18F
017F:  MOVLW  01
0180:  SUBWF  30,F
0181:  BTFSC  03.0
0182:  GOTO   18F
0183:  SUBWF  31,F
0184:  BTFSC  03.0
0185:  GOTO   18F
0186:  SUBWF  32,F
0187:  BTFSC  03.0
0188:  GOTO   18F
0189:  INCF   32,F
018A:  INCF   31,F
018B:  INCF   30,F
018C:  MOVF   2E,W
018D:  ADDWF  2F,F
018E:  GOTO   1C1
018F:  MOVF   2D,W
0190:  SUBWF  30,F
0191:  BTFSC  03.0
0192:  GOTO   1AA
0193:  MOVLW  01
0194:  SUBWF  31,F
0195:  BTFSC  03.0
0196:  GOTO   1AA
0197:  SUBWF  32,F
0198:  BTFSC  03.0
0199:  GOTO   1AA
019A:  INCF   32,F
019B:  INCF   31,F
019C:  MOVF   2D,W
019D:  ADDWF  30,F
019E:  MOVF   2E,W
019F:  ADDWF  2F,F
01A0:  BTFSS  03.0
01A1:  GOTO   1C1
01A2:  INCF   30,F
01A3:  BTFSS  03.2
01A4:  GOTO   1C1
01A5:  INCF   31,F
01A6:  BTFSS  03.2
01A7:  GOTO   1C1
01A8:  INCF   32,F
01A9:  GOTO   1C1
01AA:  MOVF   2C,W
01AB:  IORLW  80
01AC:  SUBWF  31,F
01AD:  BTFSC  03.0
01AE:  GOTO   1C0
01AF:  MOVLW  01
01B0:  SUBWF  32,F
01B1:  BTFSC  03.0
01B2:  GOTO   1C0
01B3:  INCF   32,F
01B4:  MOVF   2C,W
01B5:  IORLW  80
01B6:  ADDWF  31,F
01B7:  MOVF   2D,W
01B8:  ADDWF  30,F
01B9:  BTFSS  03.0
01BA:  GOTO   19E
01BB:  INCF   31,F
01BC:  BTFSS  03.2
01BD:  GOTO   19E
01BE:  INCF   32,F
01BF:  GOTO   19E
01C0:  BSF    7A.0
01C1:  DECFSZ 33,F
01C2:  GOTO   1C4
01C3:  GOTO   1CF
01C4:  BCF    03.0
01C5:  RLF    2F,F
01C6:  RLF    30,F
01C7:  RLF    31,F
01C8:  RLF    32,F
01C9:  BCF    03.0
01CA:  RLF    7A,F
01CB:  RLF    79,F
01CC:  RLF    78,F
01CD:  RLF    34,F
01CE:  GOTO   17B
01CF:  BTFSS  34.0
01D0:  GOTO   1D7
01D1:  BCF    03.0
01D2:  RRF    78,F
01D3:  RRF    79,F
01D4:  RRF    7A,F
01D5:  RRF    34,F
01D6:  GOTO   1DA
01D7:  DECF   77,F
01D8:  BTFSC  03.2
01D9:  GOTO   21C
01DA:  BTFSC  34.7
01DB:  GOTO   203
01DC:  BCF    03.0
01DD:  RLF    2F,F
01DE:  RLF    30,F
01DF:  RLF    31,F
01E0:  RLF    32,F
01E1:  MOVF   2E,W
01E2:  SUBWF  2F,F
01E3:  BTFSC  03.0
01E4:  GOTO   1EF
01E5:  MOVLW  01
01E6:  SUBWF  30,F
01E7:  BTFSC  03.0
01E8:  GOTO   1EF
01E9:  SUBWF  31,F
01EA:  BTFSC  03.0
01EB:  GOTO   1EF
01EC:  SUBWF  32,F
01ED:  BTFSS  03.0
01EE:  GOTO   212
01EF:  MOVF   2D,W
01F0:  SUBWF  30,F
01F1:  BTFSC  03.0
01F2:  GOTO   1FA
01F3:  MOVLW  01
01F4:  SUBWF  31,F
01F5:  BTFSC  03.0
01F6:  GOTO   1FA
01F7:  SUBWF  32,F
01F8:  BTFSS  03.0
01F9:  GOTO   212
01FA:  MOVF   2C,W
01FB:  IORLW  80
01FC:  SUBWF  31,F
01FD:  BTFSC  03.0
01FE:  GOTO   203
01FF:  MOVLW  01
0200:  SUBWF  32,F
0201:  BTFSS  03.0
0202:  GOTO   212
0203:  INCF   7A,F
0204:  BTFSS  03.2
0205:  GOTO   212
0206:  INCF   79,F
0207:  BTFSS  03.2
0208:  GOTO   212
0209:  INCF   78,F
020A:  BTFSS  03.2
020B:  GOTO   212
020C:  INCF   77,F
020D:  BTFSC  03.2
020E:  GOTO   21C
020F:  RRF    78,F
0210:  RRF    79,F
0211:  RRF    7A,F
0212:  MOVF   28,W
0213:  MOVWF  33
0214:  MOVF   2C,W
0215:  XORWF  33,F
0216:  BTFSS  33.7
0217:  GOTO   21A
0218:  BSF    78.7
0219:  GOTO   220
021A:  BCF    78.7
021B:  GOTO   220
021C:  CLRF   77
021D:  CLRF   78
021E:  CLRF   79
021F:  CLRF   7A
0220:  RETURN
0221:  MOVLW  8E
0222:  MOVWF  77
0223:  MOVF   25,W
0224:  SUBWF  77,F
0225:  MOVF   26,W
0226:  MOVWF  79
0227:  MOVF   27,W
0228:  MOVWF  78
0229:  BSF    79.7
022A:  MOVF   77,F
022B:  BTFSC  03.2
022C:  GOTO   238
022D:  BCF    03.0
022E:  MOVF   79,F
022F:  BTFSS  03.2
0230:  GOTO   234
0231:  MOVF   78,F
0232:  BTFSC  03.2
0233:  GOTO   238
0234:  RRF    79,F
0235:  RRF    78,F
0236:  DECFSZ 77,F
0237:  GOTO   22D
0238:  BTFSS  26.7
0239:  GOTO   23F
023A:  COMF   78,F
023B:  COMF   79,F
023C:  INCF   78,F
023D:  BTFSC  03.2
023E:  INCF   79,F
023F:  RETURN
*
027E:  MOVF   0B,W
027F:  MOVWF  25
0280:  BCF    0B.7
0281:  BSF    03.5
0282:  BSF    03.6
0283:  BSF    0C.7
0284:  BSF    0C.0
0285:  NOP
0286:  NOP
0287:  BCF    03.5
0288:  BCF    03.6
0289:  BTFSC  25.7
028A:  BSF    0B.7
028B:  BSF    03.6
028C:  MOVF   0C,W
028D:  ANDLW  7F
028E:  BTFSC  03.2
028F:  GOTO   2D2
0290:  BCF    03.6
0291:  MOVWF  25
0292:  BSF    03.6
0293:  MOVF   0D,W
0294:  BCF    03.6
0295:  MOVWF  26
0296:  BSF    03.6
0297:  MOVF   0F,W
0298:  BCF    03.6
0299:  MOVWF  27
029A:  MOVF   25,W
029B:  MOVWF  28
029C:  CALL   252
029D:  MOVF   26,W
029E:  BSF    03.6
029F:  MOVWF  0D
02A0:  BCF    03.6
02A1:  MOVF   27,W
02A2:  BSF    03.6
02A3:  MOVWF  0F
02A4:  BCF    03.6
02A5:  MOVF   0B,W
02A6:  MOVWF  28
02A7:  BCF    0B.7
02A8:  BSF    03.5
02A9:  BSF    03.6
02AA:  BSF    0C.7
02AB:  BSF    0C.0
02AC:  NOP
02AD:  NOP
02AE:  BCF    03.5
02AF:  BCF    03.6
02B0:  BTFSC  28.7
02B1:  BSF    0B.7
02B2:  BSF    03.6
02B3:  RLF    0C,W
02B4:  RLF    0E,W
02B5:  ANDLW  7F
02B6:  BTFSC  03.2
02B7:  GOTO   2D2
02B8:  BCF    03.6
02B9:  MOVWF  25
02BA:  BSF    03.6
02BB:  MOVF   0D,W
02BC:  BCF    03.6
02BD:  MOVWF  26
02BE:  BSF    03.6
02BF:  MOVF   0F,W
02C0:  BCF    03.6
02C1:  MOVWF  27
02C2:  MOVF   25,W
02C3:  MOVWF  28
02C4:  CALL   252
02C5:  MOVF   26,W
02C6:  BSF    03.6
02C7:  MOVWF  0D
02C8:  BCF    03.6
02C9:  MOVF   27,W
02CA:  BSF    03.6
02CB:  MOVWF  0F
02CC:  INCF   0D,F
02CD:  BTFSC  03.2
02CE:  INCF   0F,F
02CF:  BCF    03.6
02D0:  GOTO   27E
02D1:  BSF    03.6
02D2:  BCF    03.6
02D3:  RETURN
02D4:  MOVF   28,W
02D5:  CLRF   78
02D6:  SUBWF  27,W
02D7:  BTFSC  03.0
02D8:  GOTO   2DC
02D9:  MOVF   27,W
02DA:  MOVWF  77
02DB:  GOTO   2E8
02DC:  CLRF   77
02DD:  MOVLW  08
02DE:  MOVWF  29
02DF:  RLF    27,F
02E0:  RLF    77,F
02E1:  MOVF   28,W
02E2:  SUBWF  77,W
02E3:  BTFSC  03.0
02E4:  MOVWF  77
02E5:  RLF    78,F
02E6:  DECFSZ 29,F
02E7:  GOTO   2DF
02E8:  RETURN
02E9:  MOVF   78,W
02EA:  MOVF   25,W
02EB:  MOVWF  27
02EC:  MOVLW  64
02ED:  MOVWF  28
02EE:  CALL   2D4
02EF:  MOVF   77,W
02F0:  MOVWF  25
02F1:  MOVF   78,W
02F2:  MOVLW  30
02F3:  BTFSS  03.2
02F4:  GOTO   2FC
02F5:  BTFSS  26.1
02F6:  GOTO   303
02F7:  BTFSC  26.3
02F8:  GOTO   303
02F9:  BTFSC  26.4
02FA:  MOVLW  20
02FB:  GOTO   2FF
02FC:  BCF    26.3
02FD:  BCF    26.4
02FE:  BSF    26.0
02FF:  ADDWF  78,F
0300:  MOVF   78,W
0301:  MOVWF  28
0302:  CALL   252
0303:  MOVF   25,W
0304:  MOVWF  27
0305:  MOVLW  0A
0306:  MOVWF  28
0307:  CALL   2D4
0308:  MOVF   77,W
0309:  MOVWF  25
030A:  MOVF   78,W
030B:  MOVLW  30
030C:  BTFSS  03.2
030D:  GOTO   314
030E:  BTFSC  26.3
030F:  GOTO   318
0310:  BTFSS  26.0
0311:  GOTO   318
0312:  BTFSC  26.4
0313:  MOVLW  20
0314:  ADDWF  78,F
0315:  MOVF   78,W
0316:  MOVWF  28
0317:  CALL   252
0318:  MOVLW  30
0319:  ADDWF  25,F
031A:  MOVF   25,W
031B:  MOVWF  28
031C:  CALL   252
031D:  RETURN
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... #fuses hs
.................... #use delay(clock=20M)
*
0023:  MOVLW  2A
0024:  MOVWF  04
0025:  BCF    03.7
0026:  MOVF   00,W
0027:  BTFSC  03.2
0028:  GOTO   036
0029:  MOVLW  06
002A:  MOVWF  78
002B:  CLRF   77
002C:  DECFSZ 77,F
002D:  GOTO   02C
002E:  DECFSZ 78,F
002F:  GOTO   02B
0030:  MOVLW  7B
0031:  MOVWF  77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  DECFSZ 00,F
0035:  GOTO   029
0036:  RETURN
.................... //Khaibao LCD
.................... #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... #define LCD_RS_PIN      PIN_E1                                    ////
.................... #define LCD_RW_PIN      PIN_E2                                    ////
.................... #define LCD_DATA4       PIN_D4                                    ////
.................... #define LCD_DATA5       PIN_D5                                    ////
.................... #define LCD_DATA6       PIN_D6                                    ////
.................... #define LCD_DATA7       PIN_D7 
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
009E:  BSF    08.4
....................    output_float(LCD_DATA5);
009F:  BSF    08.5
....................    output_float(LCD_DATA6);
00A0:  BSF    08.6
....................    output_float(LCD_DATA7);
00A1:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
00A2:  BCF    03.5
00A3:  BSF    09.2
00A4:  BSF    03.5
00A5:  BCF    09.2
....................    delay_cycles(1);
00A6:  NOP
....................    lcd_output_enable(1);
00A7:  BCF    03.5
00A8:  BSF    09.0
00A9:  BSF    03.5
00AA:  BCF    09.0
....................    delay_cycles(1);
00AB:  NOP
....................    high = lcd_read_nibble();
00AC:  BCF    03.5
00AD:  CALL   065
00AE:  MOVF   78,W
00AF:  MOVWF  30
....................       
....................    lcd_output_enable(0);
00B0:  BCF    09.0
00B1:  BSF    03.5
00B2:  BCF    09.0
....................    delay_cycles(1);
00B3:  NOP
....................    lcd_output_enable(1);
00B4:  BCF    03.5
00B5:  BSF    09.0
00B6:  BSF    03.5
00B7:  BCF    09.0
....................    delay_us(1);
00B8:  GOTO   0B9
00B9:  GOTO   0BA
00BA:  NOP
....................    low = lcd_read_nibble();
00BB:  BCF    03.5
00BC:  CALL   065
00BD:  MOVF   78,W
00BE:  MOVWF  2F
....................       
....................    lcd_output_enable(0);
00BF:  BCF    09.0
00C0:  BSF    03.5
00C1:  BCF    09.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00C2:  BCF    08.4
....................    output_drive(LCD_DATA5);
00C3:  BCF    08.5
....................    output_drive(LCD_DATA6);
00C4:  BCF    08.6
....................    output_drive(LCD_DATA7);
00C5:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
00C6:  BCF    03.5
00C7:  SWAPF  30,W
00C8:  MOVWF  77
00C9:  MOVLW  F0
00CA:  ANDWF  77,F
00CB:  MOVF   77,W
00CC:  IORWF  2F,W
00CD:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
0065:  CLRF   31
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0066:  BSF    03.5
0067:  BSF    08.4
0068:  MOVLW  00
0069:  BCF    03.5
006A:  BTFSC  08.4
006B:  MOVLW  01
006C:  IORWF  31,F
....................    n |= input(LCD_DATA5) << 1;
006D:  BSF    03.5
006E:  BSF    08.5
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  08.5
0072:  MOVLW  01
0073:  MOVWF  77
0074:  BCF    03.0
0075:  RLF    77,F
0076:  MOVF   77,W
0077:  IORWF  31,F
....................    n |= input(LCD_DATA6) << 2;
0078:  BSF    03.5
0079:  BSF    08.6
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  08.6
007D:  MOVLW  01
007E:  MOVWF  77
007F:  RLF    77,F
0080:  RLF    77,F
0081:  MOVLW  FC
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  IORWF  31,F
....................    n |= input(LCD_DATA7) << 3;
0085:  BSF    03.5
0086:  BSF    08.7
0087:  MOVLW  00
0088:  BCF    03.5
0089:  BTFSC  08.7
008A:  MOVLW  01
008B:  MOVWF  77
008C:  RLF    77,F
008D:  RLF    77,F
008E:  RLF    77,F
008F:  MOVLW  F8
0090:  ANDWF  77,F
0091:  MOVF   77,W
0092:  IORWF  31,F
....................    
....................    return(n);
0093:  MOVF   31,W
0094:  MOVWF  78
....................   #else
0095:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0037:  BTFSC  30.0
0038:  GOTO   03B
0039:  BCF    08.4
003A:  GOTO   03C
003B:  BSF    08.4
003C:  BSF    03.5
003D:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
003E:  BCF    03.5
003F:  BTFSC  30.1
0040:  GOTO   043
0041:  BCF    08.5
0042:  GOTO   044
0043:  BSF    08.5
0044:  BSF    03.5
0045:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0046:  BCF    03.5
0047:  BTFSC  30.2
0048:  GOTO   04B
0049:  BCF    08.6
004A:  GOTO   04C
004B:  BSF    08.6
004C:  BSF    03.5
004D:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
004E:  BCF    03.5
004F:  BTFSC  30.3
0050:  GOTO   053
0051:  BCF    08.7
0052:  GOTO   054
0053:  BSF    08.7
0054:  BSF    03.5
0055:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0056:  NOP
....................    lcd_output_enable(1);
0057:  BCF    03.5
0058:  BSF    09.0
0059:  BSF    03.5
005A:  BCF    09.0
....................    delay_us(2);
005B:  MOVLW  03
005C:  MOVWF  77
005D:  DECFSZ 77,F
005E:  GOTO   05D
....................    lcd_output_enable(0);
005F:  BCF    03.5
0060:  BCF    09.0
0061:  BSF    03.5
0062:  BCF    09.0
0063:  BCF    03.5
0064:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0096:  BSF    03.5
0097:  BCF    09.0
....................    lcd_rs_tris();
0098:  BCF    09.1
....................    lcd_rw_tris();
0099:  BCF    09.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
009A:  BCF    03.5
009B:  BCF    09.1
009C:  BSF    03.5
009D:  BCF    09.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
00CE:  MOVF   78,W
00CF:  MOVWF  2F
00D0:  BTFSS  2F.7
00D1:  GOTO   0D4
00D2:  BSF    03.5
00D3:  GOTO   09E
....................    lcd_output_rs(address);
00D4:  MOVF   2D,F
00D5:  BTFSS  03.2
00D6:  GOTO   0D9
00D7:  BCF    09.1
00D8:  GOTO   0DA
00D9:  BSF    09.1
00DA:  BSF    03.5
00DB:  BCF    09.1
....................    delay_cycles(1);
00DC:  NOP
....................    lcd_output_rw(0);
00DD:  BCF    03.5
00DE:  BCF    09.2
00DF:  BSF    03.5
00E0:  BCF    09.2
....................    delay_cycles(1);
00E1:  NOP
....................    lcd_output_enable(0);
00E2:  BCF    03.5
00E3:  BCF    09.0
00E4:  BSF    03.5
00E5:  BCF    09.0
....................    lcd_send_nibble(n >> 4);
00E6:  BCF    03.5
00E7:  SWAPF  2E,W
00E8:  MOVWF  2F
00E9:  MOVLW  0F
00EA:  ANDWF  2F,F
00EB:  MOVF   2F,W
00EC:  MOVWF  30
00ED:  CALL   037
....................    lcd_send_nibble(n & 0xf);
00EE:  MOVF   2E,W
00EF:  ANDLW  0F
00F0:  MOVWF  2F
00F1:  MOVWF  30
00F2:  CALL   037
00F3:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00F4:  MOVLW  28
00F5:  MOVWF  26
00F6:  MOVLW  0C
00F7:  MOVWF  27
00F8:  MOVLW  01
00F9:  MOVWF  28
00FA:  MOVLW  06
00FB:  MOVWF  29
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00FC:  BCF    09.0
00FD:  BSF    03.5
00FE:  BCF    09.0
....................    lcd_output_rs(0);
00FF:  BCF    03.5
0100:  BCF    09.1
0101:  BSF    03.5
0102:  BCF    09.1
....................    lcd_output_rw(0);
0103:  BCF    03.5
0104:  BCF    09.2
0105:  BSF    03.5
0106:  BCF    09.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
0107:  BCF    08.4
....................    output_drive(LCD_DATA5);
0108:  BCF    08.5
....................    output_drive(LCD_DATA6);
0109:  BCF    08.6
....................    output_drive(LCD_DATA7);
010A:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
010B:  BCF    09.0
....................    lcd_rs_tris();
010C:  BCF    09.1
....................    lcd_rw_tris();
010D:  BCF    09.2
....................  #endif
....................     
....................    delay_ms(15);
010E:  MOVLW  0F
010F:  BCF    03.5
0110:  MOVWF  2A
0111:  CALL   023
....................    for(i=1;i<=3;++i)
0112:  MOVLW  01
0113:  MOVWF  25
0114:  MOVF   25,W
0115:  SUBLW  03
0116:  BTFSS  03.0
0117:  GOTO   120
....................    {
....................        lcd_send_nibble(3);
0118:  MOVLW  03
0119:  MOVWF  30
011A:  CALL   037
....................        delay_ms(5);
011B:  MOVLW  05
011C:  MOVWF  2A
011D:  CALL   023
011E:  INCF   25,F
011F:  GOTO   114
....................    }
....................    
....................    lcd_send_nibble(2);
0120:  MOVLW  02
0121:  MOVWF  30
0122:  CALL   037
....................    delay_ms(5);
0123:  MOVLW  05
0124:  MOVWF  2A
0125:  CALL   023
....................    for(i=0;i<=3;++i)
0126:  CLRF   25
0127:  MOVF   25,W
0128:  SUBLW  03
0129:  BTFSS  03.0
012A:  GOTO   137
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
012B:  MOVLW  26
012C:  ADDWF  25,W
012D:  MOVWF  04
012E:  BCF    03.7
012F:  MOVF   00,W
0130:  MOVWF  2A
0131:  CLRF   2D
0132:  MOVF   2A,W
0133:  MOVWF  2E
0134:  CALL   096
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0135:  INCF   25,F
0136:  GOTO   127
0137:  BCF    0A.3
0138:  BCF    0A.4
0139:  GOTO   340 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0240:  DECFSZ 2A,W
0241:  GOTO   243
0242:  GOTO   246
....................       address=LCD_LINE_TWO;
0243:  MOVLW  40
0244:  MOVWF  2B
0245:  GOTO   247
....................    else
....................       address=0;
0246:  CLRF   2B
....................      
....................    address+=x-1;
0247:  MOVLW  01
0248:  SUBWF  29,W
0249:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address);
024A:  MOVF   2B,W
024B:  IORLW  80
024C:  MOVWF  2C
024D:  CLRF   2D
024E:  MOVF   2C,W
024F:  MOVWF  2E
0250:  CALL   096
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0251:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0252:  MOVF   28,W
0253:  XORLW  07
0254:  BTFSC  03.2
0255:  GOTO   260
0256:  XORLW  0B
0257:  BTFSC  03.2
0258:  GOTO   265
0259:  XORLW  06
025A:  BTFSC  03.2
025B:  GOTO   26D
025C:  XORLW  02
025D:  BTFSC  03.2
025E:  GOTO   273
025F:  GOTO   278
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0260:  MOVLW  01
0261:  MOVWF  29
0262:  MOVWF  2A
0263:  CALL   240
0264:  GOTO   27D
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0265:  CLRF   2D
0266:  MOVLW  01
0267:  MOVWF  2E
0268:  CALL   096
....................                      delay_ms(2);
0269:  MOVLW  02
026A:  MOVWF  2A
026B:  CALL   023
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
026C:  GOTO   27D
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
026D:  MOVLW  01
026E:  MOVWF  29
026F:  MOVLW  02
0270:  MOVWF  2A
0271:  CALL   240
0272:  GOTO   27D
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0273:  CLRF   2D
0274:  MOVLW  10
0275:  MOVWF  2E
0276:  CALL   096
0277:  GOTO   27D
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0278:  MOVLW  01
0279:  MOVWF  2D
027A:  MOVF   28,W
027B:  MOVWF  2E
027C:  CALL   096
....................      #endif
....................    }
027D:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... //khai bao bien 
.................... unsigned int8 nd1, nd2;
.................... unsigned int8 mode=0;
.................... 
.................... 
.................... void main()
*
031E:  MOVF   03,W
031F:  ANDLW  1F
0320:  MOVWF  03
0321:  CLRF   22
0322:  CLRF   24
0323:  CLRF   23
0324:  BSF    03.5
0325:  BSF    03.6
0326:  MOVF   09,W
0327:  ANDLW  C0
0328:  MOVWF  09
0329:  BCF    03.6
032A:  BCF    1F.4
032B:  BCF    1F.5
032C:  MOVLW  00
032D:  BSF    03.6
032E:  MOVWF  08
032F:  BCF    03.5
0330:  CLRF   07
0331:  CLRF   08
0332:  CLRF   09
0333:  BCF    03.7
.................... {
....................    set_tris_a(0xff);
0334:  MOVLW  FF
0335:  BSF    03.5
0336:  BCF    03.6
0337:  MOVWF  05
....................    set_tris_d(0);set_tris_e(0);
0338:  MOVLW  00
0339:  MOVWF  08
033A:  BCF    09.0
033B:  BCF    09.1
033C:  BCF    09.2
033D:  BCF    09.3
....................    
....................    lcd_init();
033E:  BCF    03.5
033F:  GOTO   0F4
....................    setup_adc(adc_Clock_div_32);
0340:  BCF    1F.6
0341:  BSF    1F.7
0342:  BSF    03.5
0343:  BSF    1F.7
0344:  BCF    03.5
0345:  BSF    1F.0
....................    setup_adc_ports(SAN1|SAN2|VSS_VREF);
0346:  BSF    03.5
0347:  BSF    03.6
0348:  MOVF   09,W
0349:  ANDLW  C0
034A:  MOVWF  09
034B:  BCF    03.6
034C:  BSF    1F.4
034D:  BCF    1F.5
034E:  MOVLW  06
034F:  BSF    03.6
0350:  MOVWF  08
....................    
....................    while(true)
....................    {
....................       set_adc_Channel(1);
0351:  MOVLW  04
0352:  MOVWF  78
0353:  BCF    03.5
0354:  BCF    03.6
0355:  MOVF   1F,W
0356:  ANDLW  C3
0357:  IORWF  78,W
0358:  MOVWF  1F
....................       nd1=read_adc()/2.842;
0359:  BSF    1F.1
035A:  BTFSC  1F.1
035B:  GOTO   35A
035C:  MOVF   1E,W
035D:  MOVWF  79
035E:  BSF    03.5
035F:  MOVF   1E,W
0360:  MOVWF  78
0361:  MOVF   79,W
0362:  BCF    03.5
0363:  MOVWF  26
0364:  MOVF   78,W
0365:  MOVWF  25
0366:  MOVF   26,W
0367:  MOVWF  28
0368:  MOVF   78,W
0369:  MOVWF  27
036A:  CALL   13A
036B:  MOVF   7A,W
036C:  MOVWF  2A
036D:  MOVF   79,W
036E:  MOVWF  29
036F:  MOVF   78,W
0370:  MOVWF  28
0371:  MOVF   77,W
0372:  MOVWF  27
0373:  MOVLW  54
0374:  MOVWF  2E
0375:  MOVLW  E3
0376:  MOVWF  2D
0377:  MOVLW  35
0378:  MOVWF  2C
0379:  MOVLW  80
037A:  MOVWF  2B
037B:  CALL   157
037C:  MOVF   7A,W
037D:  MOVWF  28
037E:  MOVF   79,W
037F:  MOVWF  27
0380:  MOVF   78,W
0381:  MOVWF  26
0382:  MOVF   77,W
0383:  MOVWF  25
0384:  CALL   221
0385:  MOVF   78,W
0386:  MOVWF  20
....................       set_adc_channel(2);
0387:  MOVLW  08
0388:  MOVWF  78
0389:  MOVF   1F,W
038A:  ANDLW  C3
038B:  IORWF  78,W
038C:  MOVWF  1F
....................       nd2=read_adc()/2.842;
038D:  BSF    1F.1
038E:  BTFSC  1F.1
038F:  GOTO   38E
0390:  MOVF   1E,W
0391:  MOVWF  79
0392:  BSF    03.5
0393:  MOVF   1E,W
0394:  MOVWF  78
0395:  MOVF   79,W
0396:  BCF    03.5
0397:  MOVWF  26
0398:  MOVF   78,W
0399:  MOVWF  25
039A:  MOVF   26,W
039B:  MOVWF  28
039C:  MOVF   78,W
039D:  MOVWF  27
039E:  CALL   13A
039F:  MOVF   7A,W
03A0:  MOVWF  2A
03A1:  MOVF   79,W
03A2:  MOVWF  29
03A3:  MOVF   78,W
03A4:  MOVWF  28
03A5:  MOVF   77,W
03A6:  MOVWF  27
03A7:  MOVLW  54
03A8:  MOVWF  2E
03A9:  MOVLW  E3
03AA:  MOVWF  2D
03AB:  MOVLW  35
03AC:  MOVWF  2C
03AD:  MOVLW  80
03AE:  MOVWF  2B
03AF:  CALL   157
03B0:  MOVF   7A,W
03B1:  MOVWF  28
03B2:  MOVF   79,W
03B3:  MOVWF  27
03B4:  MOVF   78,W
03B5:  MOVWF  26
03B6:  MOVF   77,W
03B7:  MOVWF  25
03B8:  CALL   221
03B9:  MOVF   78,W
03BA:  MOVWF  21
....................       
....................       if(nd1>60 && nd2 >60)
03BB:  MOVF   20,W
03BC:  SUBLW  3C
03BD:  BTFSC  03.0
03BE:  GOTO   3D0
03BF:  MOVF   21,W
03C0:  SUBLW  3C
03C1:  BTFSC  03.0
03C2:  GOTO   3D0
....................       {
....................          //canh bao qua nhiet 2 kenh 
....................          lcd_gotoxy(1,2);
03C3:  MOVLW  01
03C4:  MOVWF  29
03C5:  MOVLW  02
03C6:  MOVWF  2A
03C7:  CALL   240
....................          lcd_putc("QUA NHIET 2K");
03C8:  MOVLW  04
03C9:  BSF    03.6
03CA:  MOVWF  0D
03CB:  MOVLW  00
03CC:  MOVWF  0F
03CD:  BCF    03.6
03CE:  CALL   27E
....................       }
03CF:  GOTO   3FE
....................       else if (nd1 > 60)
03D0:  MOVF   20,W
03D1:  SUBLW  3C
03D2:  BTFSC  03.0
03D3:  GOTO   3E1
....................       {
....................          lcd_gotoxy(1,2);
03D4:  MOVLW  01
03D5:  MOVWF  29
03D6:  MOVLW  02
03D7:  MOVWF  2A
03D8:  CALL   240
....................          lcd_putc("QUA NHIET K1");
03D9:  MOVLW  0B
03DA:  BSF    03.6
03DB:  MOVWF  0D
03DC:  MOVLW  00
03DD:  MOVWF  0F
03DE:  BCF    03.6
03DF:  CALL   27E
....................       }
03E0:  GOTO   3FE
....................       else if (nd2 > 60)
03E1:  MOVF   21,W
03E2:  SUBLW  3C
03E3:  BTFSC  03.0
03E4:  GOTO   3F2
....................       {
....................          lcd_gotoxy(1,2);
03E5:  MOVLW  01
03E6:  MOVWF  29
03E7:  MOVLW  02
03E8:  MOVWF  2A
03E9:  CALL   240
....................          lcd_putc("QUA NHIET K2");
03EA:  MOVLW  12
03EB:  BSF    03.6
03EC:  MOVWF  0D
03ED:  MOVLW  00
03EE:  MOVWF  0F
03EF:  BCF    03.6
03F0:  CALL   27E
....................       }
03F1:  GOTO   3FE
....................       ELSE
....................       {
....................          lcd_gotoxy(1,2);
03F2:  MOVLW  01
03F3:  MOVWF  29
03F4:  MOVLW  02
03F5:  MOVWF  2A
03F6:  CALL   240
....................          lcd_putc("               ");
03F7:  MOVLW  19
03F8:  BSF    03.6
03F9:  MOVWF  0D
03FA:  MOVLW  00
03FB:  MOVWF  0F
03FC:  BCF    03.6
03FD:  CALL   27E
....................       }
....................       
....................       //Hien thi gia tri nhiet do 
....................       lcd_gotoxy(1,1);
03FE:  MOVLW  01
03FF:  MOVWF  29
0400:  MOVWF  2A
0401:  CALL   240
....................       printf(lcd_putc,"T1=%02u",nd1);
0402:  MOVLW  54
0403:  MOVWF  28
0404:  CALL   252
0405:  MOVLW  31
0406:  MOVWF  28
0407:  CALL   252
0408:  MOVLW  3D
0409:  MOVWF  28
040A:  CALL   252
040B:  MOVF   20,W
040C:  MOVWF  25
040D:  MOVLW  01
040E:  MOVWF  26
040F:  CALL   2E9
....................       lcd_putc(223); //dau do C
0410:  MOVLW  DF
0411:  MOVWF  28
0412:  CALL   252
....................       lcd_putc("C");
0413:  MOVLW  21
0414:  BSF    03.6
0415:  MOVWF  0D
0416:  MOVLW  00
0417:  MOVWF  0F
0418:  BCF    03.6
0419:  CALL   27E
.................... 
....................       lcd_gotoxy(10,1);
041A:  MOVLW  0A
041B:  MOVWF  29
041C:  MOVLW  01
041D:  MOVWF  2A
041E:  CALL   240
....................       printf(lcd_putc,"T2=%02u",nd2);
041F:  MOVLW  54
0420:  MOVWF  28
0421:  CALL   252
0422:  MOVLW  32
0423:  MOVWF  28
0424:  CALL   252
0425:  MOVLW  3D
0426:  MOVWF  28
0427:  CALL   252
0428:  MOVF   21,W
0429:  MOVWF  25
042A:  MOVLW  01
042B:  MOVWF  26
042C:  CALL   2E9
....................       lcd_putc(223); //dau do C
042D:  MOVLW  DF
042E:  MOVWF  28
042F:  CALL   252
....................       lcd_putc("C");
0430:  MOVLW  22
0431:  BSF    03.6
0432:  MOVWF  0D
0433:  MOVLW  00
0434:  MOVWF  0F
0435:  BCF    03.6
0436:  CALL   27E
0437:  BSF    03.5
0438:  BSF    03.6
0439:  GOTO   351
....................       
....................    }
.................... }
.................... 
043A:  SLEEP
.................... 
.................... 

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
