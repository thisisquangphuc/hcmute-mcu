CCS PCM C Compiler, Version 5.101, 43599               05-Jun-22 11:12

               Filename:   E:\HCMUTE\0 - VXL\0 - TEACHING\Off-HK2-21-22\Day5\hk2_21_22_uc1.lst

               ROM used:   860 words (10%)
                           Largest free fragment is 2048
               RAM used:   19 (5%) at main() level
                           32 (9%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   283
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   03F
.................... #include <16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0031:  BCF    0A.0
0032:  BCF    0A.1
0033:  BCF    0A.2
0034:  ADDWF  02,F
0035:  RETLW  C0
0036:  RETLW  F9
0037:  RETLW  A4
0038:  RETLW  B0
0039:  RETLW  99
003A:  RETLW  92
003B:  RETLW  82
003C:  RETLW  F8
003D:  RETLW  80
003E:  RETLW  90
*
0160:  MOVLW  8E
0161:  MOVWF  77
0162:  MOVF   2E,W
0163:  MOVWF  78
0164:  MOVF   2D,W
0165:  MOVWF  79
0166:  CLRF   7A
0167:  MOVF   78,F
0168:  BTFSS  03.2
0169:  GOTO   174
016A:  MOVF   79,W
016B:  MOVWF  78
016C:  CLRF   79
016D:  MOVLW  08
016E:  SUBWF  77,F
016F:  MOVF   78,F
0170:  BTFSS  03.2
0171:  GOTO   174
0172:  CLRF   77
0173:  GOTO   17C
0174:  BCF    03.0
0175:  BTFSC  78.7
0176:  GOTO   17B
0177:  RLF    79,F
0178:  RLF    78,F
0179:  DECF   77,F
017A:  GOTO   174
017B:  BCF    78.7
017C:  BCF    0A.3
017D:  BCF    0A.4
017E:  GOTO   31B (RETURN)
017F:  MOVF   2D,W
0180:  BTFSC  03.2
0181:  GOTO   244
0182:  MOVWF  39
0183:  MOVF   31,W
0184:  BTFSC  03.2
0185:  GOTO   244
0186:  SUBWF  39,F
0187:  BTFSS  03.0
0188:  GOTO   18E
0189:  MOVLW  7F
018A:  ADDWF  39,F
018B:  BTFSC  03.0
018C:  GOTO   244
018D:  GOTO   194
018E:  MOVLW  81
018F:  SUBWF  39,F
0190:  BTFSS  03.0
0191:  GOTO   244
0192:  BTFSC  03.2
0193:  GOTO   244
0194:  MOVF   39,W
0195:  MOVWF  77
0196:  CLRF   78
0197:  CLRF   79
0198:  CLRF   7A
0199:  CLRF   38
019A:  MOVF   2E,W
019B:  MOVWF  37
019C:  BSF    37.7
019D:  MOVF   2F,W
019E:  MOVWF  36
019F:  MOVF   30,W
01A0:  MOVWF  35
01A1:  MOVLW  19
01A2:  MOVWF  39
01A3:  MOVF   34,W
01A4:  SUBWF  35,F
01A5:  BTFSC  03.0
01A6:  GOTO   1B7
01A7:  MOVLW  01
01A8:  SUBWF  36,F
01A9:  BTFSC  03.0
01AA:  GOTO   1B7
01AB:  SUBWF  37,F
01AC:  BTFSC  03.0
01AD:  GOTO   1B7
01AE:  SUBWF  38,F
01AF:  BTFSC  03.0
01B0:  GOTO   1B7
01B1:  INCF   38,F
01B2:  INCF   37,F
01B3:  INCF   36,F
01B4:  MOVF   34,W
01B5:  ADDWF  35,F
01B6:  GOTO   1E9
01B7:  MOVF   33,W
01B8:  SUBWF  36,F
01B9:  BTFSC  03.0
01BA:  GOTO   1D2
01BB:  MOVLW  01
01BC:  SUBWF  37,F
01BD:  BTFSC  03.0
01BE:  GOTO   1D2
01BF:  SUBWF  38,F
01C0:  BTFSC  03.0
01C1:  GOTO   1D2
01C2:  INCF   38,F
01C3:  INCF   37,F
01C4:  MOVF   33,W
01C5:  ADDWF  36,F
01C6:  MOVF   34,W
01C7:  ADDWF  35,F
01C8:  BTFSS  03.0
01C9:  GOTO   1E9
01CA:  INCF   36,F
01CB:  BTFSS  03.2
01CC:  GOTO   1E9
01CD:  INCF   37,F
01CE:  BTFSS  03.2
01CF:  GOTO   1E9
01D0:  INCF   38,F
01D1:  GOTO   1E9
01D2:  MOVF   32,W
01D3:  IORLW  80
01D4:  SUBWF  37,F
01D5:  BTFSC  03.0
01D6:  GOTO   1E8
01D7:  MOVLW  01
01D8:  SUBWF  38,F
01D9:  BTFSC  03.0
01DA:  GOTO   1E8
01DB:  INCF   38,F
01DC:  MOVF   32,W
01DD:  IORLW  80
01DE:  ADDWF  37,F
01DF:  MOVF   33,W
01E0:  ADDWF  36,F
01E1:  BTFSS  03.0
01E2:  GOTO   1C6
01E3:  INCF   37,F
01E4:  BTFSS  03.2
01E5:  GOTO   1C6
01E6:  INCF   38,F
01E7:  GOTO   1C6
01E8:  BSF    7A.0
01E9:  DECFSZ 39,F
01EA:  GOTO   1EC
01EB:  GOTO   1F7
01EC:  BCF    03.0
01ED:  RLF    35,F
01EE:  RLF    36,F
01EF:  RLF    37,F
01F0:  RLF    38,F
01F1:  BCF    03.0
01F2:  RLF    7A,F
01F3:  RLF    79,F
01F4:  RLF    78,F
01F5:  RLF    3A,F
01F6:  GOTO   1A3
01F7:  BTFSS  3A.0
01F8:  GOTO   1FF
01F9:  BCF    03.0
01FA:  RRF    78,F
01FB:  RRF    79,F
01FC:  RRF    7A,F
01FD:  RRF    3A,F
01FE:  GOTO   202
01FF:  DECF   77,F
0200:  BTFSC  03.2
0201:  GOTO   244
0202:  BTFSC  3A.7
0203:  GOTO   22B
0204:  BCF    03.0
0205:  RLF    35,F
0206:  RLF    36,F
0207:  RLF    37,F
0208:  RLF    38,F
0209:  MOVF   34,W
020A:  SUBWF  35,F
020B:  BTFSC  03.0
020C:  GOTO   217
020D:  MOVLW  01
020E:  SUBWF  36,F
020F:  BTFSC  03.0
0210:  GOTO   217
0211:  SUBWF  37,F
0212:  BTFSC  03.0
0213:  GOTO   217
0214:  SUBWF  38,F
0215:  BTFSS  03.0
0216:  GOTO   23A
0217:  MOVF   33,W
0218:  SUBWF  36,F
0219:  BTFSC  03.0
021A:  GOTO   222
021B:  MOVLW  01
021C:  SUBWF  37,F
021D:  BTFSC  03.0
021E:  GOTO   222
021F:  SUBWF  38,F
0220:  BTFSS  03.0
0221:  GOTO   23A
0222:  MOVF   32,W
0223:  IORLW  80
0224:  SUBWF  37,F
0225:  BTFSC  03.0
0226:  GOTO   22B
0227:  MOVLW  01
0228:  SUBWF  38,F
0229:  BTFSS  03.0
022A:  GOTO   23A
022B:  INCF   7A,F
022C:  BTFSS  03.2
022D:  GOTO   23A
022E:  INCF   79,F
022F:  BTFSS  03.2
0230:  GOTO   23A
0231:  INCF   78,F
0232:  BTFSS  03.2
0233:  GOTO   23A
0234:  INCF   77,F
0235:  BTFSC  03.2
0236:  GOTO   244
0237:  RRF    78,F
0238:  RRF    79,F
0239:  RRF    7A,F
023A:  MOVF   2E,W
023B:  MOVWF  39
023C:  MOVF   32,W
023D:  XORWF  39,F
023E:  BTFSS  39.7
023F:  GOTO   242
0240:  BSF    78.7
0241:  GOTO   248
0242:  BCF    78.7
0243:  GOTO   248
0244:  CLRF   77
0245:  CLRF   78
0246:  CLRF   79
0247:  CLRF   7A
0248:  BCF    0A.3
0249:  BCF    0A.4
024A:  GOTO   32C (RETURN)
024B:  MOVLW  8E
024C:  MOVWF  77
024D:  MOVF   2D,W
024E:  SUBWF  77,F
024F:  MOVF   2E,W
0250:  MOVWF  79
0251:  MOVF   2F,W
0252:  MOVWF  78
0253:  BSF    79.7
0254:  MOVF   77,F
0255:  BTFSC  03.2
0256:  GOTO   262
0257:  BCF    03.0
0258:  MOVF   79,F
0259:  BTFSS  03.2
025A:  GOTO   25E
025B:  MOVF   78,F
025C:  BTFSC  03.2
025D:  GOTO   262
025E:  RRF    79,F
025F:  RRF    78,F
0260:  DECFSZ 77,F
0261:  GOTO   257
0262:  BTFSS  2E.7
0263:  GOTO   269
0264:  COMF   78,F
0265:  COMF   79,F
0266:  INCF   78,F
0267:  BTFSC  03.2
0268:  INCF   79,F
0269:  BCF    0A.3
026A:  BCF    0A.4
026B:  GOTO   335 (RETURN)
026C:  MOVF   2E,W
026D:  CLRF   78
026E:  SUBWF  2D,W
026F:  BTFSC  03.0
0270:  GOTO   274
0271:  MOVF   2D,W
0272:  MOVWF  77
0273:  GOTO   280
0274:  CLRF   77
0275:  MOVLW  08
0276:  MOVWF  2F
0277:  RLF    2D,F
0278:  RLF    77,F
0279:  MOVF   2E,W
027A:  SUBWF  77,W
027B:  BTFSC  03.0
027C:  MOVWF  77
027D:  RLF    78,F
027E:  DECFSZ 2F,F
027F:  GOTO   277
0280:  BCF    0A.3
0281:  BCF    0A.4
0282:  GOTO   34E (RETURN)
.................... 
.................... #list
.................... 
.................... #device adc=10
.................... #fuses  intrc_io  // khai bao nay de su dung 2 chan A6,A7 thanh IO 
.................... #use delay(clock=8Mhz)
*
004F:  MOVLW  32
0050:  MOVWF  04
0051:  BCF    03.7
0052:  MOVF   00,W
0053:  BTFSC  03.2
0054:  GOTO   062
0055:  MOVLW  02
0056:  MOVWF  78
0057:  CLRF   77
0058:  DECFSZ 77,F
0059:  GOTO   058
005A:  DECFSZ 78,F
005B:  GOTO   057
005C:  MOVLW  97
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  DECFSZ 00,F
0061:  GOTO   055
0062:  RETURN
.................... #use rs232(BAUD=9600,BITS=8,STOP=1,PARITY=N,RCV=PIN_C7,XMIT=PIN_C6) 
.................... 
.................... const unsigned int8 code7seg[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90}; 
.................... 
.................... #define LED_MODE  pin_e1
.................... #define RUN       pin_b0
.................... #define STOP1     pin_b1
.................... 
.................... #define LCD_ENABLE_PIN  PIN_D0                                    ////
.................... #define LCD_RS_PIN      PIN_D2                                    ////
.................... #define LCD_RW_PIN      PIN_D1                                    ////
.................... #define LCD_DATA4       PIN_D4                                    ////
.................... #define LCD_DATA5       PIN_D5                                    ////
.................... #define LCD_DATA6       PIN_D6                                    ////
.................... #define LCD_DATA7       PIN_D7 
.................... #include <lcd.c>   //#include <tv_lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
*
0108:  BSF    08.4
....................    output_float(LCD_DATA5);
0109:  BSF    08.5
....................    output_float(LCD_DATA6);
010A:  BSF    08.6
....................    output_float(LCD_DATA7);
010B:  BSF    08.7
....................   #else
....................    lcdtris.data = 0xF;
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
010C:  BCF    03.5
010D:  BSF    08.1
010E:  BSF    03.5
010F:  BCF    08.1
....................    delay_cycles(1);
0110:  NOP
....................    lcd_output_enable(1);
0111:  BCF    03.5
0112:  BSF    08.0
0113:  BSF    03.5
0114:  BCF    08.0
....................    delay_cycles(1);
0115:  NOP
....................    high = lcd_read_nibble();
0116:  BCF    03.5
0117:  CALL   08F
0118:  MOVF   78,W
0119:  MOVWF  36
....................       
....................    lcd_output_enable(0);
011A:  BCF    08.0
011B:  BSF    03.5
011C:  BCF    08.0
....................    delay_cycles(1);
011D:  NOP
....................    lcd_output_enable(1);
011E:  BCF    03.5
011F:  BSF    08.0
0120:  BSF    03.5
0121:  BCF    08.0
....................    delay_us(1);
0122:  GOTO   123
....................    low = lcd_read_nibble();
0123:  BCF    03.5
0124:  CALL   08F
0125:  MOVF   78,W
0126:  MOVWF  35
....................       
....................    lcd_output_enable(0);
0127:  BCF    08.0
0128:  BSF    03.5
0129:  BCF    08.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
012A:  BCF    08.4
....................    output_drive(LCD_DATA5);
012B:  BCF    08.5
....................    output_drive(LCD_DATA6);
012C:  BCF    08.6
....................    output_drive(LCD_DATA7);
012D:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
012E:  BCF    03.5
012F:  SWAPF  36,W
0130:  MOVWF  77
0131:  MOVLW  F0
0132:  ANDWF  77,F
0133:  MOVF   77,W
0134:  IORWF  35,W
0135:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
*
008F:  CLRF   37
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
0090:  BSF    03.5
0091:  BSF    08.4
0092:  MOVLW  00
0093:  BCF    03.5
0094:  BTFSC  08.4
0095:  MOVLW  01
0096:  IORWF  37,F
....................    n |= input(LCD_DATA5) << 1;
0097:  BSF    03.5
0098:  BSF    08.5
0099:  MOVLW  00
009A:  BCF    03.5
009B:  BTFSC  08.5
009C:  MOVLW  01
009D:  MOVWF  77
009E:  BCF    03.0
009F:  RLF    77,F
00A0:  MOVF   77,W
00A1:  IORWF  37,F
....................    n |= input(LCD_DATA6) << 2;
00A2:  BSF    03.5
00A3:  BSF    08.6
00A4:  MOVLW  00
00A5:  BCF    03.5
00A6:  BTFSC  08.6
00A7:  MOVLW  01
00A8:  MOVWF  77
00A9:  RLF    77,F
00AA:  RLF    77,F
00AB:  MOVLW  FC
00AC:  ANDWF  77,F
00AD:  MOVF   77,W
00AE:  IORWF  37,F
....................    n |= input(LCD_DATA7) << 3;
00AF:  BSF    03.5
00B0:  BSF    08.7
00B1:  MOVLW  00
00B2:  BCF    03.5
00B3:  BTFSC  08.7
00B4:  MOVLW  01
00B5:  MOVWF  77
00B6:  RLF    77,F
00B7:  RLF    77,F
00B8:  RLF    77,F
00B9:  MOVLW  F8
00BA:  ANDWF  77,F
00BB:  MOVF   77,W
00BC:  IORWF  37,F
....................    
....................    return(n);
00BD:  MOVF   37,W
00BE:  MOVWF  78
....................   #else
00BF:  RETURN
....................    return(lcd.data);
....................   #endif
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
*
0063:  BTFSC  36.0
0064:  GOTO   067
0065:  BCF    08.4
0066:  GOTO   068
0067:  BSF    08.4
0068:  BSF    03.5
0069:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1));
006A:  BCF    03.5
006B:  BTFSC  36.1
006C:  GOTO   06F
006D:  BCF    08.5
006E:  GOTO   070
006F:  BSF    08.5
0070:  BSF    03.5
0071:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2));
0072:  BCF    03.5
0073:  BTFSC  36.2
0074:  GOTO   077
0075:  BCF    08.6
0076:  GOTO   078
0077:  BSF    08.6
0078:  BSF    03.5
0079:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3));
007A:  BCF    03.5
007B:  BTFSC  36.3
007C:  GOTO   07F
007D:  BCF    08.7
007E:  GOTO   080
007F:  BSF    08.7
0080:  BSF    03.5
0081:  BCF    08.7
....................   #else      
....................    lcdlat.data = n;
....................   #endif
....................       
....................    delay_cycles(1);
0082:  NOP
....................    lcd_output_enable(1);
0083:  BCF    03.5
0084:  BSF    08.0
0085:  BSF    03.5
0086:  BCF    08.0
....................    delay_us(2);
0087:  GOTO   088
0088:  GOTO   089
....................    lcd_output_enable(0);
0089:  BCF    03.5
008A:  BCF    08.0
008B:  BSF    03.5
008C:  BCF    08.0
008D:  BCF    03.5
008E:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0100:  BSF    03.5
0101:  BCF    08.0
....................    lcd_rs_tris();
0102:  BCF    08.2
....................    lcd_rw_tris();
0103:  BCF    08.1
....................   #endif
.................... 
....................    lcd_output_rs(0);
0104:  BCF    03.5
0105:  BCF    08.2
0106:  BSF    03.5
0107:  BCF    08.2
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0136:  MOVF   78,W
0137:  MOVWF  35
0138:  BTFSS  35.7
0139:  GOTO   13C
013A:  BSF    03.5
013B:  GOTO   108
....................    lcd_output_rs(address);
013C:  MOVF   33,F
013D:  BTFSS  03.2
013E:  GOTO   141
013F:  BCF    08.2
0140:  GOTO   142
0141:  BSF    08.2
0142:  BSF    03.5
0143:  BCF    08.2
....................    delay_cycles(1);
0144:  NOP
....................    lcd_output_rw(0);
0145:  BCF    03.5
0146:  BCF    08.1
0147:  BSF    03.5
0148:  BCF    08.1
....................    delay_cycles(1);
0149:  NOP
....................    lcd_output_enable(0);
014A:  BCF    03.5
014B:  BCF    08.0
014C:  BSF    03.5
014D:  BCF    08.0
....................    lcd_send_nibble(n >> 4);
014E:  BCF    03.5
014F:  SWAPF  34,W
0150:  MOVWF  35
0151:  MOVLW  0F
0152:  ANDWF  35,F
0153:  MOVF   35,W
0154:  MOVWF  36
0155:  CALL   063
....................    lcd_send_nibble(n & 0xf);
0156:  MOVF   34,W
0157:  ANDLW  0F
0158:  MOVWF  35
0159:  MOVWF  36
015A:  CALL   063
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
*
00C0:  MOVLW  28
00C1:  MOVWF  2E
00C2:  MOVLW  0C
00C3:  MOVWF  2F
00C4:  MOVLW  01
00C5:  MOVWF  30
00C6:  MOVLW  06
00C7:  MOVWF  31
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00C8:  BCF    08.0
00C9:  BSF    03.5
00CA:  BCF    08.0
....................    lcd_output_rs(0);
00CB:  BCF    03.5
00CC:  BCF    08.2
00CD:  BSF    03.5
00CE:  BCF    08.2
....................    lcd_output_rw(0);
00CF:  BCF    03.5
00D0:  BCF    08.1
00D1:  BSF    03.5
00D2:  BCF    08.1
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
00D3:  BCF    08.4
....................    output_drive(LCD_DATA5);
00D4:  BCF    08.5
....................    output_drive(LCD_DATA6);
00D5:  BCF    08.6
....................    output_drive(LCD_DATA7);
00D6:  BCF    08.7
....................   #else
....................    lcdtris.data = 0x0;
....................   #endif
....................    lcd_enable_tris();
00D7:  BCF    08.0
....................    lcd_rs_tris();
00D8:  BCF    08.2
....................    lcd_rw_tris();
00D9:  BCF    08.1
....................  #endif
....................     
....................    delay_ms(15);
00DA:  MOVLW  0F
00DB:  BCF    03.5
00DC:  MOVWF  32
00DD:  CALL   04F
....................    for(i=1;i<=3;++i)
00DE:  MOVLW  01
00DF:  MOVWF  2D
00E0:  MOVF   2D,W
00E1:  SUBLW  03
00E2:  BTFSS  03.0
00E3:  GOTO   0EC
....................    {
....................        lcd_send_nibble(3);
00E4:  MOVLW  03
00E5:  MOVWF  36
00E6:  CALL   063
....................        delay_ms(5);
00E7:  MOVLW  05
00E8:  MOVWF  32
00E9:  CALL   04F
00EA:  INCF   2D,F
00EB:  GOTO   0E0
....................    }
....................    
....................    lcd_send_nibble(2);
00EC:  MOVLW  02
00ED:  MOVWF  36
00EE:  CALL   063
....................    delay_ms(5);
00EF:  MOVLW  05
00F0:  MOVWF  32
00F1:  CALL   04F
....................    for(i=0;i<=3;++i)
00F2:  CLRF   2D
00F3:  MOVF   2D,W
00F4:  SUBLW  03
00F5:  BTFSS  03.0
00F6:  GOTO   15D
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00F7:  MOVLW  2E
00F8:  ADDWF  2D,W
00F9:  MOVWF  04
00FA:  BCF    03.7
00FB:  MOVF   00,W
00FC:  MOVWF  32
00FD:  CLRF   33
00FE:  MOVF   32,W
00FF:  MOVWF  34
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
*
015B:  INCF   2D,F
015C:  GOTO   0F3
015D:  BCF    0A.3
015E:  BCF    0A.4
015F:  GOTO   2D5 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
....................       address=LCD_LINE_TWO;
....................    else
....................       address=0;
....................      
....................    address+=x-1;
....................    lcd_send_byte(0,0x80|address);
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
....................                      delay_ms(2);
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
....................      #endif
....................    }
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... unsigned int8 SPEED=0;
.................... int1 MODE=0;  //0,1
.................... unsigned int16 POT=0;
.................... unsigned char rx_data=0;
.................... 
.................... #int_rda
.................... void ngat_nhan()
.................... {
....................    rx_data = getc();
*
003F:  BTFSS  0C.5
0040:  GOTO   03F
0041:  MOVF   1A,W
0042:  MOVWF  2B
....................    if(rx_data == 'S') 
0043:  MOVF   2B,W
0044:  SUBLW  53
0045:  BTFSS  03.2
0046:  GOTO   04B
....................    {
....................       output_low(LED_MODE);
0047:  BSF    03.5
0048:  BCF    09.1
0049:  BCF    03.5
004A:  BCF    09.1
....................    }
004B:  BCF    0C.5
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   01D
.................... }
.................... 
.................... void main()
*
0283:  MOVF   03,W
0284:  ANDLW  1F
0285:  MOVWF  03
0286:  MOVLW  71
0287:  BSF    03.5
0288:  MOVWF  0F
0289:  CLRF   10
028A:  MOVF   0F,W
028B:  BSF    03.6
028C:  BCF    07.3
028D:  MOVLW  0C
028E:  BCF    03.6
028F:  MOVWF  19
0290:  MOVLW  A2
0291:  MOVWF  18
0292:  MOVLW  90
0293:  BCF    03.5
0294:  MOVWF  18
0295:  CLRF   27
0296:  BCF    28.0
0297:  CLRF   2A
0298:  CLRF   29
0299:  CLRF   2B
029A:  MOVLW  FF
029B:  MOVWF  2C
029C:  BSF    03.5
029D:  BSF    03.6
029E:  MOVF   09,W
029F:  ANDLW  C0
02A0:  MOVWF  09
02A1:  BCF    03.6
02A2:  BCF    1F.4
02A3:  BCF    1F.5
02A4:  MOVLW  00
02A5:  BSF    03.6
02A6:  MOVWF  08
02A7:  BCF    03.5
02A8:  CLRF   07
02A9:  CLRF   08
02AA:  CLRF   09
02AB:  BCF    03.7
.................... {
....................    set_tris_a(0x00);
02AC:  MOVLW  00
02AD:  BSF    03.5
02AE:  BCF    03.6
02AF:  MOVWF  05
....................    set_tris_b(0xff);
02B0:  MOVLW  FF
02B1:  MOVWF  06
....................    set_tris_c(0x80);
02B2:  MOVLW  80
02B3:  MOVWF  07
02B4:  BCF    03.5
02B5:  MOVWF  2C
....................    set_tris_e(0x00);
02B6:  BSF    03.5
02B7:  BCF    09.0
02B8:  BCF    09.1
02B9:  BCF    09.2
02BA:  BCF    09.3
....................    
....................    setup_adc(adc_clock_internal);
02BB:  BCF    03.5
02BC:  BSF    1F.6
02BD:  BSF    1F.7
02BE:  BSF    03.5
02BF:  BSF    1F.7
02C0:  BCF    03.5
02C1:  BSF    1F.0
....................    setup_adc_ports(SAN5|VSS_VDD);
02C2:  BSF    03.5
02C3:  BSF    03.6
02C4:  MOVF   09,W
02C5:  ANDLW  C0
02C6:  MOVWF  09
02C7:  BCF    03.6
02C8:  BCF    1F.4
02C9:  BCF    1F.5
02CA:  MOVLW  20
02CB:  BSF    03.6
02CC:  MOVWF  08
....................    
....................    enable_interrupts(global);
02CD:  MOVLW  C0
02CE:  BCF    03.5
02CF:  BCF    03.6
02D0:  IORWF  0B,F
....................    enable_interrupts(int_rda);
02D1:  BSF    03.5
02D2:  BSF    0C.5
....................    lcd_init();
02D3:  BCF    03.5
02D4:  GOTO   0C0
....................    MODE=0;
02D5:  BCF    28.0
....................    
....................    while(true)
....................    {
....................       if(input(RUN)==0) 
02D6:  BSF    03.5
02D7:  BSF    06.0
02D8:  BCF    03.5
02D9:  BTFSC  06.0
02DA:  GOTO   2E5
....................       {
....................          MODE = 1;
02DB:  BSF    28.0
....................          output_high(LED_MODE);
02DC:  BSF    03.5
02DD:  BCF    09.1
02DE:  BCF    03.5
02DF:  BSF    09.1
....................          putc('R');      
02E0:  MOVLW  52
02E1:  BTFSS  0C.4
02E2:  GOTO   2E1
02E3:  MOVWF  19
....................       }
02E4:  GOTO   2F3
....................       else if(input(STOP1)==0) 
02E5:  BSF    03.5
02E6:  BSF    06.1
02E7:  BCF    03.5
02E8:  BTFSC  06.1
02E9:  GOTO   2F3
....................       {
....................          MODE = 0;
02EA:  BCF    28.0
....................          output_low(LED_MODE);
02EB:  BSF    03.5
02EC:  BCF    09.1
02ED:  BCF    03.5
02EE:  BCF    09.1
....................          putc('S');
02EF:  MOVLW  53
02F0:  BTFSS  0C.4
02F1:  GOTO   2F0
02F2:  MOVWF  19
....................       }
....................       
....................       set_adc_Channel(5);
02F3:  MOVLW  14
02F4:  MOVWF  78
02F5:  MOVF   1F,W
02F6:  ANDLW  C3
02F7:  IORWF  78,W
02F8:  MOVWF  1F
....................       delay_ms(2);
02F9:  MOVLW  02
02FA:  MOVWF  32
02FB:  CALL   04F
....................       POT = read_adc();
02FC:  BSF    1F.1
02FD:  BTFSC  1F.1
02FE:  GOTO   2FD
02FF:  MOVF   1E,W
0300:  MOVWF  79
0301:  BSF    03.5
0302:  MOVF   1E,W
0303:  MOVWF  78
0304:  MOVF   79,W
0305:  BCF    03.5
0306:  MOVWF  2A
0307:  MOVF   78,W
0308:  MOVWF  29
....................       
....................       //lcd_gotoxy(1,1);
....................       //lcd_putc(rx_data+48);
....................       POT = read_adc();
0309:  BSF    1F.1
030A:  BTFSC  1F.1
030B:  GOTO   30A
030C:  MOVF   1E,W
030D:  MOVWF  79
030E:  BSF    03.5
030F:  MOVF   1E,W
0310:  MOVWF  78
0311:  MOVF   79,W
0312:  BCF    03.5
0313:  MOVWF  2A
0314:  MOVF   78,W
0315:  MOVWF  29
....................       SPEED = POT/102.3;
0316:  MOVF   2A,W
0317:  MOVWF  2E
0318:  MOVF   29,W
0319:  MOVWF  2D
031A:  GOTO   160
031B:  MOVF   7A,W
031C:  MOVWF  30
031D:  MOVF   79,W
031E:  MOVWF  2F
031F:  MOVF   78,W
0320:  MOVWF  2E
0321:  MOVF   77,W
0322:  MOVWF  2D
0323:  MOVLW  9A
0324:  MOVWF  34
0325:  MOVLW  99
0326:  MOVWF  33
0327:  MOVLW  4C
0328:  MOVWF  32
0329:  MOVLW  85
032A:  MOVWF  31
032B:  GOTO   17F
032C:  MOVF   7A,W
032D:  MOVWF  30
032E:  MOVF   79,W
032F:  MOVWF  2F
0330:  MOVF   78,W
0331:  MOVWF  2E
0332:  MOVF   77,W
0333:  MOVWF  2D
0334:  GOTO   24B
0335:  MOVF   78,W
0336:  MOVWF  27
....................       //printf(lcd_putc,"%04Lu   %02u",POT, SPEED);
....................       
....................       putc(POT);
0337:  MOVF   29,W
0338:  BTFSS  0C.4
0339:  GOTO   338
033A:  MOVWF  19
....................       if(SPEED == 10) 
033B:  MOVF   27,W
033C:  SUBLW  0A
033D:  BTFSS  03.2
033E:  GOTO   349
....................       {
....................          output_a(0x8E);  // chu F
033F:  BSF    03.5
0340:  CLRF   05
0341:  MOVLW  8E
0342:  BCF    03.5
0343:  MOVWF  05
....................          putc('F');
0344:  MOVLW  46
0345:  BTFSS  0C.4
0346:  GOTO   345
0347:  MOVWF  19
....................       }
0348:  GOTO   35A
....................       else 
....................       {
....................          output_a(code7seg[SPEED%10]);
0349:  MOVF   27,W
034A:  MOVWF  2D
034B:  MOVLW  0A
034C:  MOVWF  2E
034D:  GOTO   26C
034E:  MOVF   77,W
034F:  CALL   031
0350:  MOVWF  2D
0351:  BSF    03.5
0352:  CLRF   05
0353:  BCF    03.5
0354:  MOVF   2D,W
0355:  MOVWF  05
....................          putc(SPEED);
0356:  MOVF   27,W
0357:  BTFSS  0C.4
0358:  GOTO   357
0359:  MOVWF  19
....................       }
035A:  GOTO   2D6
....................       
....................    }
.................... }
.................... 
035B:  SLEEP
.................... 

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
